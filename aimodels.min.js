import{IMAGENET_CLASSES}from"./imagenet_classes.js";let modelBody,baseUrlForModels="",modelTop=[],verboseMode=!1,initializing=!1;const Version="v1",INPUT_IMAGE_SIZE=224,imageNetBase="mobilenetv1",bodyOutShapeDict={mobilenetv1:[1,7,7,1024],mobilenetv3:[1,7,7,1280],resnet50:[1,7,7,2048],imagenet:[1,7,7,2048]};let bodyOutShape=bodyOutShapeDict.imagenet;const reportStatus=e=>{verboseMode&&console.log(e)};export async function initAI(e,t,o){if(t&&(baseUrlForModels=t),o&&(verboseMode=o),initializing)return initializing;bodyOutShape=bodyOutShapeDict[imageNetBase],initializing=!0;try{modelBody=await tf.loadLayersModel(baseUrlForModels+`models/${Version}/body/${imageNetBase}/model.json`),tf.tidy(()=>{modelBody.predict(tf.zeros([1,INPUT_IMAGE_SIZE,INPUT_IMAGE_SIZE,3])).dispose()});for(var r=0;r<e.length;r++){const t=e[r].toLowerCase();let o;o="imagenet"==t?imageNetBase:t,modelTop[t]=await tf.loadLayersModel(baseUrlForModels+`models/${Version}/top/${o}/model.json`),tf.tidy(()=>{modelTop[t].predict(tf.zeros(bodyOutShape)).dispose()})}}catch(e){reportStatus(e)}return initializing=!1};function preprocessImage(e,t){let o=t,r=tf.browser.fromPixels(e).resizeNearestNeighbor([224,224]).toFloat();if(void 0===o)return r.expandDims();if(o.startsWith("mobilenet")){let e=tf.scalar(127.5);return r.sub(e).div(e).expandDims()}if(o.startsWith("resnet")){const e=[-123.15,-115.9,-103.06];return r.add(e).expandDims()}alert("Unknown model name..")}async function getImage(e){const t=new Image;return t.crossOrigin="anonymous",t.src=e,t}function isValidHttpUrl(e){let t;try{t=new URL(e)}catch(e){return!1}return"http:"===t.protocol||"https:"===t.protocol}export async function classifyAI(e,t=[],o=!1,r=!1){let i;if(verboseMode=r,"string"!=typeof e&&"nodeName"in e&&"img"==e.nodeName.toLowerCase())i=e.src,reportStatus(`Processing ${i} from ${e}`);else{if(!isValidHttpUrl(e))return void console.log(`Skipping. The ${e.nodeName} type of HTML element is not image.`);{let t=await getImage(e);e=t,i=t.src,reportStatus(`Processing ${i} from ${e}`)}}if(!modelBody||0==modelTop.length){await initAI(verboseMode)}reportStatus(`Predicting...${t}`);let n={};const s=performance.now();let a=preprocessImage(e,imageNetBase);return tf.tidy(()=>{let e=performance.now(),r=modelBody.predict(a).dataSync();r=(r=tf.add(r,0)).reshape(bodyOutShape);for(var l=0;l<t.length;l++){const e=t[l].toLowerCase();if("imagenet"==e){let t=performance.now(),o=modelTop[e].predict(r).dataSync();const i=performance.now()-t;let s=Array.from(o).map(function(e,t){return{probability:e,className:IMAGENET_CLASSES[t]}}).sort(function(e,t){return t.probability-e.probability}).slice(0,5);n[e]=s;const a=performance.now()-t;s.length>0&&reportStatus(s[0]),reportStatus(`Done predicting ${e} in top ${Math.floor(i)} ms `+`(including preprocessing: ${Math.floor(a)} ms)`)}}const d=performance.now()-e,c=performance.now()-s;if(reportStatus(`Done predicting ${t} in ${Math.floor(d)} ms total`+`(including preprocessing: ${Math.floor(c)} ms)`),o){const e=r.dataSync();Promise.resolve(sendFeedback(e,i,verboseMode))}}),n};